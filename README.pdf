NAME:
                WTF.c - connects to WTFServer.c and executes actions given entered in the command line.
                WTFServer.c - conencts to WTF.c. Sends and receive files from WTF.c.

SYNOPSIS:
                Terminal: WTF.c
                 ./WTF configure <IP address> <Port No>
                           OR
                 ./WTF create <projectName>
                           OR
                 ./WTF configure <projectName>
                           OR
                 ./WTF checkout <projectName>
                           OR
                 ./WTF update <projectName>
                           OR
                 ./WTF upgarde <projectName>
                           OR
                 ./WTF commit <projectName>
                           OR
                 ./WTF push <projectName>
                           OR
                 ./WTF destroy <projectName>
                           OR
                 ./WTF add <projectName> <fileName>
                           OR
                 ./WTF remove <projectName> <fileName>
                           OR
                 ./WTF currentverison <projectName>
         OR
                 ./WTF history <projectName>
                           OR
                 ./WTF rollback <projectName> <version>

                 Terminal WTFServer.c
                 ./WTFServer <portnumber>

DESCRIPTION:
          This program has two files WTF.c and WTFServer.c. The main purpose of the program is to connectwith each other i.e. establish a connection between the client (WTF.c) and the server (WTFServer.c). The two files send and update files according to the action specified in the command line on the client side.
The client and the server both maintain a .Manifest, .Update, .Commit based on the actions run on the command line.

.Manifest is maintained both by the WTF server and client for each project. Each .Manifest file consists a file version number the project name, the filepath and the hashcode in the following format <file version number><<projectname>/path/filename><hashcode>. A Manifest's version number is incremented after a successful push. This means that is a project is changed in a way, the manifest version increases, however one push may contain multiple changes.

.Commit - An increment file version is written out a .Commit file whose live hash is different than the stored hash in the client's local .Manifest.

If the server and the client .Manifest have the same file, and the hash stored in both the server and the client .Manifest is the same but the client's live hash of the file is different than its stored hash then the following information is stored in the .Commit file
   'M <file/path><server's hash> with the file version incremented.

If the client has a file that was added to the project that the server's .Manifest does not have but the client's .Manifest does then the following information is stored in the .Commit file.
   'A <file/path><server's hash>

If the client has removed a file from the project and the server's .Manifest has the file but the clients .manifest does not then the following information is stored in the .Commit file
   'D <file/path><server's hash>'

.Update - if there is any change in the servers .Manifest for any specified project in comparison to clients .manifest a line is added to the .Update file to reflect the change. 

If the server has modifications for the and the server and client .Manifest are different versions and the clients .manifest has files whose version and stored hash are different than the servers, and the live hash of those files match the hash in the clients .manifest the following information is entered in the .Update file.
   'M <file/path><servers hash>

If the server and client .Manifest are different versions and the clients .Manifest does not have a files that appear in the servers then the following information is added into the .Update file
   A <file/path> <servers hash> 

If the server and client .Manifest are different versions, and the clients .Manifest does have a file that does not appear in the servers then the following information is added into the .Update file.
   D <file/path> <servers hash>


STRUCTURES:
	WTF.c:
		In WTF for the client a struct is made to store all the file entries from Manifest. These entries are:
		Char * status;
		Char * filePath;
		Char * hash;
		Int fileVersion;
		Struct file * next;
WTFServer.c:
		In WTF for the server a struct is made to store the mutexes per project. The entriesare
		Pthread_mutex_t * mutex;
		Char* project;
		Struct projectMutexes* next;

WTF Functions:

Add  ./WTF add <project> <file>
On successful calls, add will add the hash for the given existing file to the .manifest file, along with a version number and filepath. Manifest Updated! will be printed and function will return 0. If a file already exists in the manifest, a warning will be printed. If the file or project does not exist, or if there is a failure in the process, add will return -1 and print an error.

Remove ./WTF remove <project> <file>
On successful calls, remove will remove the entry for the given file path. Manifest Updated! will be printed and function will return 0. If the file does not exist in the manifest, a warning will be printed. If the project does not exist, or if there is a failure in the process, remove will return -1 and print an error.

History  ./WTF history <project>
On successful calls, history will connect to the server. Upon successful connection, history will send back the .history file for the given project. The client will then print the file contents to STDOUT and return 0. If the project does not exist, or the process fails, history will return -1 and print an error.

Checkout ./WTF checkout <project>
On successful calls, checkout will connect to the server. Upon successful connection, the server will send a tarred version of the project to the client. The client will untar the file and have a copy of the current version of the project. Checkout will print Checkout Successful and return 0. If the project doesnt exist, the client has a folder with the same name, or the process fails, checkout will return -1 and print an error.

Create ./WTF create <project>
On successful calls, create will connect to the server. Upon successful connection, the server will create the projectand put a .data folder, .history file, and .manifest file inside. .history and .manifest will contain 0 for the starting version. The server will then send the manifest over to the client as confirmation. The client will then create theproject and manifest file and return 0. Create will print Project Successfully Created!. If the project already exists, the client has a folder with the same name, or the process fails, create will return -1 and print an error.

Destroy ./WTF destroy <project>
On successful calls, destroy will connect to the server. Upon successful connection, the server will destroy the project and all files inside. After confirmation of success, the client will print Project Successfully Destroyed! and return 0. If the project did not exist, or there is some failure in the process, destroy will return -1 and print an error. 
Current Version ./WTF currentversion <project>
On successful calls, currVer will connect to the server. Upon successful connection, currVer will send back the .manifest file for the given project. The client will then parse the file contents and make a list of entries from the manifest file. The manifest version will be printed, followed by each file path with their current file version. currVer will return 0. If the project does not exist, or the process fails, currVer will return -1 and print an error.

Commit ./WTF commit <project>
On successful calls, commit will connect to the server. Upon successful connection, the server will send back the manifest file for the project to the client. Every file whose live hash is different from the stored hash saved in the clients local .Manifest should have an entry written out to a .commit file. The function loops through the client manifest and compares against the server and adds the necessary information in the .commit file. If there is no changes in the project and then print accordingly.

Update ./WTF update <project>
On successful calls, update will connect to the server. Upon successful connection, the server will send back the manifest file for the project to the client. If the version numbers are not the same the function then creates a .Update file where the information is stored depending upon the results of the loop where the server manifest compares against the clients manifest. If the client hash is different than the server hash and live hash, an .Conflict file will be made and .Update will be deleted.

Upgrade ./WTF upgrade <project>
The upgrade program reads the .Update file and and handles files on update according to actions in the .Update file.

Push ./WTF push <project>
The push function pushes the commit for a  project. It reads the content of the .commit file. The function loops through the files in the .commit and makes changes to the hash and file version of the entries for the new manifest. It then sends the file data to the server. 

Rollback ./WTF rollback <project> <ver>
On successful calls, rollback will connect to the server. Upon successful connection, the server will search for the version requested by the client. The function checks if the project version exists. And makes the history path and stores the old data. This function destroys the old version. 
